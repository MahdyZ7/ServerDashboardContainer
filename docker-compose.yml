
services:

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./srcs/Nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - backend
    depends_on:
      - backend
      - frontend
    init: true
    expose:
      - "80"

  postgres:
    image: postgres
    container_name: postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=server_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    init: true
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d server_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

#  echo "your_secure_password_here" | docker secret create postgres_password -

  backend:
    container_name: DataCollection
    build: ./srcs/DataCollection
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./srcs/DataCollection:/app
    networks:
      - backend
    depends_on:
      - postgres
    init: true

  api:
    container_name: API
    build: ./srcs/Backend
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./srcs/Backend:/app
    networks:
      - backend
    depends_on:
      - postgres
    init: true
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  frontend:
    container_name: Frontend
    build: ./srcs/Frontend
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./srcs/Frontend:/app
    networks:
      - backend
    depends_on:
      - backend
      - api
    init: true
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s


networks:
  backend:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  